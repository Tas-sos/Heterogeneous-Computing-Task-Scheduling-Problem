/*
 * Problem.h
 *
 *  Created on: G-lts Team Lab
 *      Author: Tas-sos
 */

using namespace std;


#ifndef PROBLEM_H_
#define PROBLEM_H_


class Problem {

private :


	int processors_number;
	int tasks_number;

	double min_value;
	double min_original_value;

	int min_posTASK;
	int min_posCPU;

	int posa_tasks_eminan;



	double ** Tasks_and_processors; /* Δυναμικός 2D πίνακας, όπου θα έχει "tasks_number" γραμμές και "processors_number" στήλες.
	Κάθε γραμμή αναπαριστά μια εργασία και οι στήλες τις, τον κάθε επεξεργαστή.
	Οπότε για παράδειγμα :
		Tasks_and_processors[0][0] θα περιέχει την τιμή της πρώτης εργασίας στον πρώτο επεξεργαστή.
		Tasks_and_processors[0][1] θα περιέχει την τιμή της πρώτης εργασίας στον δεύτερο επεξεργαστή.
		....
		Tasks_and_processors[1][0] θα περιέχει την τιμή της δεύτερης εργασίας στον πρώτο επεξεργαστή.
		Tasks_and_processors[1][1] θα περιέχει την τιμή της δεύτερης εργασίας στον δεύτερο επεξεργαστή.
	*/

	double ** Origina__Tasks_and_processors; /* Δυναμικός 2D πίνακας, όπου είναι ακριβώς ίδιος με τον "Tasks_and_processors", όμως σε αυτόν
	ΔΕΝ θα αλλάζω τα περιεχόμενα του. Θα κρατάω τις αρχικές τιμές.
	*/

	/* ==================================== Ιδιωτικοί μέθοδοι. ==================================== */





public:

	Problem();
	/* Μέθοδος η οποία :
	 * 			- Ζητάει από τον χρήστη τον αριθμό των εργασιών.
	 * 			- Ζητάει από τον χρήστη τον αριθμό των επεξεργαστών.
	 * 			- Ορίζει το μέγεθος των δυναμικών πινάκων "Tasks_and_processors" & "Origina__Tasks_and_processors" .
	 */


	void getDataFromFile();
	/* Μέθοδος η οποία :
	 * 		- Ανοίγει το αρχείο με τα δεδομένα του προβλήματος ( τους χρόνους των εργασιών σε κάθε επεξεργαστή) και τα φορτώνει στις κατάλληλες δομές.
	 */


	void PrintDatabyProcessors();
	/* Μέθοδος η οποία :
	 * 		- Εμφανίζει για κάθε εργασία :
	 * 			- Τις τιμές που έχει σε κάθε επεξεργαστή.
	 */


	void Find_and_SAVE_the_lowest_values_of_all();
	/* Μέθοδος η οποία :
	 * 		- Βρίσκει από όλο τον δυναμικό δισδιάστατο πίνακα "Tasks_and_processors", την χαμηλότερη τιμή εργασίας & την θέση της.
	 * 		  - Αποθηκεύει την τιμή της στην ιδιότητα "min_value"
	 * 		  - Αποθηκεύει την τιμή πραγματική τιμή της ελάχιστης εργασίας στην ιδιότητα "min_original_value.
	 * 		  - Αποθηκεύει την θέση της χαμηλότερης τιμής στις ιδιότητες "min_posTASK" & "min_posCPU".
	 */



	void removing_the_current_minimum_task_by_all_processors();
	/* Μέθοδος η οποία :
	 *  	- Από την τρέχουσα ελάχιστη σε χρόνο εργασία που έχει βρεθεί, σε σύγκριση με όλους τους επεξεργαστές.
	 * 			- Προσθέτει τον ΠΡΑΓΜΑΤΙΚΌ χρόνο που απαιτούσε Η ΊΔΙΑ, στον επεξεργαστή της, σε ΌΛΕΣ τις εναπομείναντες εργασίες του επεξεργαστή της.
	 * 			- Την αφαιρεί έπειτα, από ΌΛΟΥΣ τους επεξεργαστές.
	 */


	int Number_of_Tasks();
	/* Μέθοδος η οποία :
	 * 		- Βρίσκει και επιστρέφει τον αριθμό των εργασιών που έχουν όλοι οι επεξεργαστές.
	 */


	void Final_Time();
	/* Μέθοδος η οποία :
	 * 		- Εμφανίζει σε ποιον επεξεργαστή υπάρχει καθώς και τον χρόνο, η εργασία με τον μικρότερο χρόνο από όλους τους επεξεργαστές.
	 */


	void Original_PrintDatabyProcessors();
	/* Μέθοδος η οποία :
	 * 		- Εμφανίζει τα περιεχόμενα του πίνακα "Origina__Tasks_and_processors".
	 */













	virtual ~Problem();
};

#endif /* PROBLEM_H_ */
